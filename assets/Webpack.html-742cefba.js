import{_ as a,o as s,c as n,a as e}from"./app-52249f43.js";const p={},t=e(`<h1 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h1><p>在企业级的前端项目开发中，把前端开发所需的==工具，技术，流程，经验==进行规范化，标准化</p><blockquote><p>模块化：（js, css ,资源）的模块化</p><p>组件化：复用现有的UI结构，样式，行为</p><p>规范化：目录结构划分，（编码，接口，文档）规范化，Git分支管理</p><p>自动化：自动化构建，自动部署，自动化测试</p></blockquote><p><strong>前端工程化解决方案</strong></p><p>Webpack(为主)，parcel</p><h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h1><p>前端工程化的具体解决方案：提供前端模块化开发、代码压缩混淆、处理浏览器端JavaScript兼容性，性能优化</p><p>在webpack中，一切皆模块，都可以通过ES导入语法进行导入和使用</p><h1 id="对webpack的理解-解决了哪些问题" tabindex="-1"><a class="header-anchor" href="#对webpack的理解-解决了哪些问题" aria-hidden="true">#</a> 对webpack的理解，解决了哪些问题</h1><p>webpack是前端模块化的一种解决方案和打包工具，可以监听文件变化进行热模更新提高开发效率，高效地管理和维护项目中的资源</p><p>特点是：</p><ol><li>把所有文件像js,css,html，图片等资源都视为模块，并将模块整合压缩</li><li>对CommonJS，ES6，AMD的语法实现了兼容</li><li>实现模块的按需加载，缩短初始化时间</li></ol><h2 id="安装webpack" tabindex="-1"><a class="header-anchor" href="#安装webpack" aria-hidden="true">#</a> 安装Webpack</h2><blockquote><p>不推荐 全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中， 可能会导致构建失败。<strong>实际开发时按照项目需求来进行安装</strong></p><p><strong>后缀名的作用</strong></p><p>==-S== <code> --save</code> 包名会被注册到到package.json中的 <strong>dependencies</strong>中，（开发环境和生产环境（上线之后）都会存在（用到））</p><p>==-D== <code>--save-dev</code> 记录到package.json中的 <strong>devDependencies</strong>中( 只在开发阶段时才用到)</p></blockquote><h2 id="在项目中配置webpack" tabindex="-1"><a class="header-anchor" href="#在项目中配置webpack" aria-hidden="true">#</a> 在项目中配置webpack</h2><blockquote><ol><li><p>在项目根目录中，创建<strong>webpack.config.js</strong>的webpack配置文件，进行如下初始化配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack.config.js */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token string">&#39;development&#39;</span>		<span class="token comment">//mode用来指定构建模式，development和production</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<strong>package.json</strong>中添加scripts节点，新增dev脚本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* package.json */
&quot;scripts&quot;:{
	&quot;dev&quot; : &quot;webpack&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>终端中运行**npm run dev，**运行scripts中的脚本，启动webpack进行项目的打包构建</p><p>实质：先读取package.json中scripts的脚本，找到对应的webpack.config.js</p></li></ol><p>最终于会在根目录下生成dist文件夹，包含了main.js文件，打包了了文件代码以及导入的包（并没有压缩）</p><blockquote><p><strong>development打包不压缩，但速度快</strong>，开发时使用</p><p><strong>production会将代码进行压缩</strong>，体积小，但打包时间较长，==项目开发完才使用==</p></blockquote></blockquote><h2 id="webpack中的默认约定" tabindex="-1"><a class="header-anchor" href="#webpack中的默认约定" aria-hidden="true">#</a> webpack中的默认约定</h2><blockquote><ul><li>默认打包入口文件路径为 src -&gt; index.js</li><li>默认打包输出文件按路径为 dist -&gt;main.js</li></ul><p>也可以在webpack.config.js中修改默认约定</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定处理哪个文件</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/index123.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定生成的文件存放到哪里</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 存放到目录</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 生成的文件名</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>实时自动打包（自动运行npm run dev）</p><h1 id="loader和plugin的区别" tabindex="-1"><a class="header-anchor" href="#loader和plugin的区别" aria-hidden="true">#</a> Loader和plugin的区别</h1><ol><li><p>loader是文件加载器，能够运行资源文件，并对文件进行一些编译，压缩等处理,给webpack提供加载和解析非Javascript文件的能力</p></li><li><p>plugin则是插件，给webpack提供了各种灵活的功能，如打包优化，资源管理，环境变量注入等功能</p></li><li><p>loader运行在打包之前，plugins在整个编译周期都起作用</p></li><li><p>loader在module.rules中配置，plugin在plugins项中配置</p></li></ol><h1 id="常见的plugins" tabindex="-1"><a class="header-anchor" href="#常见的plugins" aria-hidden="true">#</a> 常见的Plugins</h1><blockquote><h4 id="webpack-1" tabindex="-1"><a class="header-anchor" href="#webpack-1" aria-hidden="true">#</a> webpack</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack@3.11.2 -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="webpack-cli" tabindex="-1"><a class="header-anchor" href="#webpack-cli" aria-hidden="true">#</a> webpack-cli</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack-cli@4.9.0 -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="webpack-dev-server-只在开发阶段用到" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server-只在开发阶段用到" aria-hidden="true">#</a> webpack-dev-server //只在开发阶段用到</h4><p>启动一个实时打包的http服务器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server@<span class="token number">3.11</span><span class="token number">.2</span> <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在http://127.0.0.1:8080查看项目根目录下的打包效果</p><p>这个插件生成的main.js文件在<strong>内存中而不是在dist</strong>，传统的引用会导致效果出不来，应该使用下面这种引用格式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;/main.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token comment">//script&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（就能实现网页随着代码的改动而变化，牛了）</p><hr><blockquote><h4 id="安装配置html-webpack-plugins" tabindex="-1"><a class="header-anchor" href="#安装配置html-webpack-plugins" aria-hidden="true">#</a> 安装配置html-webpack-plugins</h4></blockquote><blockquote><p><strong>作用</strong>：打开http://127.0.0.1:8080能直接打开index.html</p></blockquote><blockquote><p><strong>安装</strong></p></blockquote><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i html-webpack-plugin@5.3.2 -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><blockquote><p><strong>配置webpack.config.js文件</strong></p></blockquote><blockquote><p>打开的页面不是根目录下的index.html</p></blockquote><blockquote><p>插件会自动在页面注入一个脚本</p></blockquote><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script defer src=&quot;main.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote></blockquote><h4 id="webpack-config-js的deserve节点" tabindex="-1"><a class="header-anchor" href="#webpack-config-js的deserve节点" aria-hidden="true">#</a> webpack.config.js的deserve节点</h4><blockquote><p>能设置首次打包完成后自动打开网页，修改端口号和地址</p></blockquote><h3 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> loader</h3><blockquote><p>webpack默认只能打包.js的文件，处理不了其他后缀的文件，需要用loader处理</p><p>此时会查找webpack.config.js这个配置文件，看module.rules中是否配置了对应的loader加载器</p><p>webpack先把文件交给（use:[ ]中）最后一个loader进行处理</p><p>处理完毕后，转交给下一个loader处理，处理完毕后继续转交，若没有下一个loader，就把处理结果转交给webpack,</p><p>webpack合并到./dist/main.js中，最终生成打包好的文件</p><p><strong>调用过程</strong></p><h4 id="打包处理css文件" tabindex="-1"><a class="header-anchor" href="#打包处理css文件" aria-hidden="true">#</a> 打包处理css文件</h4><p><strong>安装</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i style<span class="token operator">-</span>loader@<span class="token number">3.0</span><span class="token number">.0</span> css<span class="token operator">-</span>loader@<span class="token number">5.2</span><span class="token number">.6</span> <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置webpack.config.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
 <span class="token comment">// 定义不同模块对应的loader</span>
 <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="打包处理less文件" tabindex="-1"><a class="header-anchor" href="#打包处理less文件" aria-hidden="true">#</a> 打包处理less文件</h4></blockquote><blockquote><p>安装</p></blockquote><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i less<span class="token operator">-</span>loader@<span class="token number">10.0</span><span class="token number">.1</span> less@<span class="token number">4.1</span><span class="token number">.1</span> <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><blockquote><p>配置</p></blockquote><blockquote><h3 id="base64图片的优缺点" tabindex="-1"><a class="header-anchor" href="#base64图片的优缺点" aria-hidden="true">#</a> base64图片的优缺点</h3></blockquote><blockquote><blockquote><p>不需要发起额外请求获取小图片</p></blockquote></blockquote><blockquote><blockquote><p>缺点：转成base64格式后，体积会增大</p></blockquote></blockquote><h3 id="打包处理样式表中与url路径相关的文件" tabindex="-1"><a class="header-anchor" href="#打包处理样式表中与url路径相关的文件" aria-hidden="true">#</a> 打包处理样式表中与url路径相关的文件</h3><p>安装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i url<span class="token operator">-</span>loader@<span class="token number">4.1</span><span class="token number">.1</span> file<span class="token operator">-</span>loader@<span class="token number">6.2</span><span class="token number">.0</span> <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jpg|png|gif$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token string">&#39;url-loader?limit=22229&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>？后面的是loader的参数项</p><ul><li>limit用来指定图片的大小，单位是字节(byte)</li><li>只有<strong>小于等于limit大小</strong>的图片，才会转为base64格式的图片</li></ul></blockquote><h1 id="常见的loader" tabindex="-1"><a class="header-anchor" href="#常见的loader" aria-hidden="true">#</a> 常见的loader</h1><ol><li>sourceMap: 方便断点调试</li><li>babel-loader：将ES6代码转换为ES5的</li><li>sass-loader/less-loader：CSS代码的转换</li><li>eslint-loader: 检查JS代码格式</li></ol><p>的</p><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2><blockquote><p>打包处理JS的高级语法</p><p><strong>安装</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i babel<span class="token operator">-</span>loader@<span class="token number">8.2</span><span class="token number">.2</span> 
@babel<span class="token operator">/</span>core@<span class="token number">7.14</span><span class="token number">.6</span> @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span>decorators@<span class="token number">7.14</span><span class="token number">.5</span> <span class="token operator">-</span><span class="token constant">D</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token comment">// webpack在调用babel-loader时，会先加载插件来使用</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;@babel/plugin-proposal-decorators&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">legacy</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="配置webpack的打包发布" tabindex="-1"><a class="header-anchor" href="#配置webpack的打包发布" aria-hidden="true">#</a> 配置webpack的打包发布</h3><blockquote><p>在<strong>package.json文件的scripts节点</strong>下，新增build命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode production&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>终端中执行npm run build</p><p>webpack --mode production：生成文件放在磁盘的根目录下，（开发上线时使用）</p><p><strong>--mode优先级高于配置里面的mode</strong></p></blockquote><h4 id="clean-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#clean-webpack-plugin" aria-hidden="true">#</a> clean-webpack-plugin</h4><blockquote><p>打包时自动清除旧文件</p><p><strong>安装</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>htmlplugin<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> SourceMap</h2><blockquote><p>是一个信息文件，存储着位置信息（<strong>源代码和打包压缩文件的行号对应关系</strong>）</p><p>报错时的行号和源代码中不一致</p><p><strong>直接在webpack.config.js中配置</strong></p><p>代码行号和源代码中对应</p></blockquote><blockquote><p><strong>只暴露行数不展示源码</strong></p></blockquote><blockquote><ul><li><h4 id="开发环境下" tabindex="-1"><a class="header-anchor" href="#开发环境下" aria-hidden="true">#</a> 开发环境下：</h4></li></ul><blockquote><p><strong>devtool：’eval-source-map’</strong></p><p><strong>好处</strong>：可以精确定位到具体的错误行</p></blockquote><ul><li><h4 id="生产环境下" tabindex="-1"><a class="header-anchor" href="#生产环境下" aria-hidden="true">#</a> 生产环境下：</h4></li></ul><blockquote><p><strong>关闭Source Map</strong></p><p>或者设置<strong>devtool：’nonsource-source-map’</strong></p><p><strong>好处</strong>：防止源码泄露，提高网站的安全性</p></blockquote></blockquote><h4 id="的原理和好处" tabindex="-1"><a class="header-anchor" href="#的原理和好处" aria-hidden="true">#</a> @的原理和好处</h4><p>导入时，使用@代表src源代码目录，从外往里找，不需要../../从里往外查找</p><blockquote><p>@<strong>需要配置</strong></p></blockquote><h3 id="实际开发中不需要自己配置webpack" tabindex="-1"><a class="header-anchor" href="#实际开发中不需要自己配置webpack" aria-hidden="true">#</a> 实际开发中不需要自己配置webpack</h3><blockquote><p>会使用命令行工具（俗称cli CLI）一键生成带有webpack的项目</p><p>开箱即用，所有webpack都是现成的</p><p>只需要知道webpack的基本概念就行</p></blockquote><h1 id="tree-shaking的工作原理" tabindex="-1"><a class="header-anchor" href="#tree-shaking的工作原理" aria-hidden="true">#</a> Tree Shaking的工作原理</h1><p>Treeshaking是一种通过清除多余代码的方式来优化项目打包体积的技术。</p><p>对于ES6之前，是使用commonJS的require（）引入模块，这种方式是动态的，开发人员可以按条件来引入需要的模块，但是<strong>commonJS无法确定实际运行前需要或者不需要某些模块，导致一些冗余的代码也被打包</strong></p><p>而在ES6中，引入了完全静态的导入语法import，必须先导入所有包后再进行条件获取，所以，可以再代码运行前分析出不需要用到的代码或模块，将其删除</p><h1 id="commonjs和es6模块化的区别" tabindex="-1"><a class="header-anchor" href="#commonjs和es6模块化的区别" aria-hidden="true">#</a> commonJS和ES6模块化的区别</h1><ol><li>commonJS输出的是值的拷贝，ES6输出的是值的引用</li><li>CommonJS是<strong>运行时加载</strong>的，ES6是输出编译后的接口</li><li>CommonJS的动态语法可以写在判断里，ES6的module只能写在代码顶部</li><li>Common的this指向当前模块，ES6的模块的this是undefined</li></ol><h1 id="hmr热模块更新" tabindex="-1"><a class="header-anchor" href="#hmr热模块更新" aria-hidden="true">#</a> HMR热模块更新</h1><ol><li>首先webpack-dev-server会创建两个服务器，提供静态资源服务express和Socket服务</li><li>express 负责直接提供静态资源服务（打包后的资源被浏览器请求和解析</li><li>Socket是一个WebSocket的长连接，双方可以通信</li><li>当socket服务器监听到对应的模块发生变化时，就生成一个mainifest.json文件和chunk.js文件,并通过长连接，直接将这两个文件主动发送给浏览器</li><li>浏览器拿到更新的文件后，通过热模块替换机制，加载文件，并针对修改的模块进行更新</li></ol><h2 id="热更新原理" tabindex="-1"><a class="header-anchor" href="#热更新原理" aria-hidden="true">#</a> 热更新原理</h2><p>webpack客户端从服务端拉取更新后的文件，也就是chunk diff的结果，webpack和浏览器之间维持了一个websocket，本地资源发生变化时，会先浏览器推送更新，带上更新的哈希值，供客户端对之前的资源进行对比</p><p>对比出差异后，会想webpack服务器发起请求获取更新的内容</p><h1 id="babel的工作原理" tabindex="-1"><a class="header-anchor" href="#babel的工作原理" aria-hidden="true">#</a> Babel的工作原理</h1><p>Babel是将ES6及以后的代码转换为ES5的代码，实现不同浏览器对JS代码的兼容</p><p>过程</p><ol><li>解析，将代码解析生成抽象语法树，</li><li>转换，对抽象语法树进行变换，</li><li>生成，将变换后的抽象语法树转换为JS代码</li></ol><h2 id="babel的原理如下" tabindex="-1"><a class="header-anchor" href="#babel的原理如下" aria-hidden="true">#</a> Babel的原理如下：</h2><ol><li><strong>词法分析（Lexical Analysis）</strong>： <ul><li>Babel首先将输入的JavaScript代码转换成一系列的令牌（tokens），这个过程叫做词法分析。令牌是代码的基本构建块，包括关键字、标识符、运算符、字符串、数字等。</li></ul></li><li><strong>语法分析（Syntax Parsing）</strong>： <ul><li>在词法分析之后，Babel使用语法解析器（Parser）将令牌转换成语法树（Abstract Syntax Tree，AST）。AST是代码的抽象表示，它以树状结构表示代码的层次结构，包括变量声明、函数定义、条件语句等。</li></ul></li><li><strong>转换（Transformation）</strong>： <ul><li>一旦生成了AST，Babel将遍历这棵树并应用一系列的转换插件。这些转换插件可以根据开发人员的配置和需求，对AST进行修改。例如，将ES6的箭头函数转换成普通函数表达式，或者将ES6的模块语法转换成CommonJS。</li></ul></li><li><strong>生成（Code Generation）</strong>： <ul><li>经过转换后，Babel将修改后的AST转换回JavaScript代码。这个过程称为代码生成。生成的代码可以是ES5或其他目标版本，取决于开发人员的配置。</li></ul></li><li><strong>输出（Output）</strong>： <ul><li>最后，Babel将生成的JavaScript代码输出到文件或直接传递给浏览器执行，使开发人员可以使用转换后的代码。</li></ul></li></ol><p>Babel的可扩展性是其强大之处。开发人员可以根据需要安装不同的插件，以支持特定的语法转换或功能扩展。这使得Babel成为了一个生态系统，可以适应不同项目和要求的工具。</p><p>总之，Babel的工作原理涉及词法分析、语法分析、转换和代码生成等步骤，使得开发人员能够在现代JavaScript语法下编写代码，并将其转换为向后兼容的版本以确保跨浏览器和环境的兼容性。</p><h1 id="构建流程" tabindex="-1"><a class="header-anchor" href="#构建流程" aria-hidden="true">#</a> 构建流程</h1><ol><li>初始化参数，从配置文件和shell语句中读取并合并参数，得出最终参数</li><li>开始编译：初始化compiler对象，加载所有配置的插件，执行对象的run方法进行编译</li><li>确定入口：根据配置中的entry项找到入口文件</li><li>编译模块：调用所有配置的loader对模块进行变异，递归找出模块所依赖的模块，确定模块之间的依赖关系</li><li>输出资源：根据入口和模块之间的依赖关系，组装成多个模块Chunk文件加入到输出列表</li></ol><h1 id="如何提高构建速度" tabindex="-1"><a class="header-anchor" href="#如何提高构建速度" aria-hidden="true">#</a> 如何提高构建速度</h1><p>使用Happypack实现多线程加速编译</p><p>treeshaking和scopehoisting剔除多余代码</p>`,69),o=[t];function l(r,i){return s(),n("div",null,o)}const d=a(p,[["render",l],["__file","Webpack.html.vue"]]);export{d as default};
