import{_ as n,o as s,c as a,a as e}from"./app-52249f43.js";const t={},o=e(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h2><p>在声明的变量后通过 <code>:</code>为该变量添加类型约束</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span>		<span class="token comment">//变量类型声明</span>

<span class="token keyword">function</span> <span class="token function">increase</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>	<span class="token comment">//函数参数类型声明</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="原始类型和对象类型" tabindex="-1"><a class="header-anchor" href="#原始类型和对象类型" aria-hidden="true">#</a> 原始类型和对象类型</h2><h3 id="原始类型" tabindex="-1"><a class="header-anchor" href="#原始类型" aria-hidden="true">#</a> 原始类型</h3><blockquote><p>string、number、boolean、null、undefined、symbol</p></blockquote><h3 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h3><ol><li><p><strong>数组类型</strong></p><blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;str2&#39;</span><span class="token punctuation">]</span>		<span class="token comment">//只包含字符串类型的数组</span>
<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>			<span class="token comment">//只包含数字类型的数组</span>

<span class="token keyword">let</span> numAndStr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p><strong>函数（参数和返回值）类型</strong></p><blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>

<span class="token comment">//函数没有返回值时，返回值类型为void</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
   
<span class="token punctuation">}</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可选参数、可选属性-对象类型" tabindex="-1"><a class="header-anchor" href="#可选参数、可选属性-对象类型" aria-hidden="true">#</a> 可选参数、可选属性（对象类型）</h4><p>可选参数可传可不传，<strong>==且必须出现在参数列表的最后==</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">mySlice</span><span class="token punctuation">(</span>value1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value2<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">axios</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
   url<span class="token operator">:</span> <span class="token builtin">string</span>
   method<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p><strong>对象类型</strong>:</p><blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> objType<span class="token operator">:</span> <span class="token punctuation">{</span> prop1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> prop2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>== 一般都使用类型别名，接口 ==</p></blockquote></li></ol><hr><h2 id="高级类型-ts新增" tabindex="-1"><a class="header-anchor" href="#高级类型-ts新增" aria-hidden="true">#</a> 高级类型（Ts新增）</h2><h3 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h3><blockquote><p>使用type关键字声明一个自定义的类型，可以为任意类型指定别名</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>  					 <span class="token comment">// 作为联合类型的简写</span>
<span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token comment">//作为交叉类型的简写</span>

<span class="token keyword">type</span> <span class="token class-name">myType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="交叉类型和联合类型" tabindex="-1"><a class="header-anchor" href="#交叉类型和联合类型" aria-hidden="true">#</a> 交叉类型和联合类型</h3><blockquote><p><strong>交叉类型</strong>适用于对象类型，合并所需类型的全部特性</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> prop<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>联合类型适用于多个类型的逻辑或关系，所选类型必须为其中任意一个</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> prop<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="索引签名类型" tabindex="-1"><a class="header-anchor" href="#索引签名类型" aria-hidden="true">#</a> 索引签名类型</h3><blockquote><p>当无法确定对象中有哪些属性（或者说对象中可以出现任意多个属性），此时，就用到索引签名类型了</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>    <span class="token comment">// 表示属性键类型为字符串的属性，属性值为number类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特别地，对象中的键是string类型，数组中的索引为数值类型</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">AnyObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">AnyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
   <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h3><blockquote><p>枚举类型的类型成员的值具有==自增长行为==（未赋值时i，默认第一个成员的值为0）</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">enum</span> myEnum <span class="token operator">=</span> <span class="token punctuation">{</span>
       up
       down
       right
       left
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="映射类型" tabindex="-1"><a class="header-anchor" href="#映射类型" aria-hidden="true">#</a> 映射类型</h3><blockquote><h4 id="只能在类型别名中使用-不能在接口中使用" tabindex="-1"><a class="header-anchor" href="#只能在类型别名中使用-不能在接口中使用" aria-hidden="true">#</a> 只能在类型别名中使用，不能在接口中使用</h4></blockquote><hr><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><h4 id="static关键字" tabindex="-1"><a class="header-anchor" href="#static关键字" aria-hidden="true">#</a> static关键字</h4><p>定义类属性或类方法（静态属性/方法），只能通过类调用，不能被实例调用</p><h4 id="abstract-关键字" tabindex="-1"><a class="header-anchor" href="#abstract-关键字" aria-hidden="true">#</a> abstract 关键字</h4><ol><li>定义的类为抽象类，不能拿来实例化对象</li><li>抽象类中，通过abstract定义抽象方法，抽象方法不能有函数体，且必须在子类中重写抽象类</li><li><strong>abstract与接口的区别</strong>：抽象类中可以定义具体实现，接口不能</li></ol><h3 id="类继承" tabindex="-1"><a class="header-anchor" href="#类继承" aria-hidden="true">#</a> 类继承</h3><ol><li><h4 id="继承父类-extends" tabindex="-1"><a class="header-anchor" href="#继承父类-extends" aria-hidden="true">#</a> 继承父类 extends</h4></li><li><h4 id="实现接口-implements-ts新增" tabindex="-1"><a class="header-anchor" href="#实现接口-implements-ts新增" aria-hidden="true">#</a> 实现接口 implements (Ts新增)</h4></li></ol><h3 id="类成员可见性" tabindex="-1"><a class="header-anchor" href="#类成员可见性" aria-hidden="true">#</a> 类成员可见性</h3><ol><li><strong>public</strong>: 公开成员，<strong>声明所在类和子类，以及它们的实例对象</strong>都可见（默认，可省略）</li><li><strong>protected</strong>：受保护成员，<strong>声明所在类和子类</strong>中可见，在实例对象中不可见</li><li><strong>private</strong>： 私有成员，只在<strong>声明所在类</strong>可见，在子类及实例对象中不可见</li><li><strong>readonly</strong>: 只读，防止在<strong>构造函数</strong>之外对该成员进行赋值</li></ol><hr><h2 id="接口interface" tabindex="-1"><a class="header-anchor" href="#接口interface" aria-hidden="true">#</a> 接口interface</h2><ol><li><p>接口就是一种规范，==<strong>只能为对象指定类型</strong>==，名称一般为首字母大写</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span>
	<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口内只能写规范，==不能写具体实现==</p></li><li><p>同名的接口的不同属性和方法会合并</p></li><li><p><strong>接口之间公共的属性和方法可以抽离出来，通过继承实现复用</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Point2D</span> <span class="token punctuation">{</span>
	x<span class="token operator">:</span> <span class="token builtin">number</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Point3D</span> <span class="token keyword">extends</span> <span class="token class-name">Point2D</span> <span class="token punctuation">{</span>		<span class="token comment">//继承Point2D的特性</span>
    z<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型在保证类型安全的前提下，==让<strong>类、函数、接口</strong>在多种不同类型下工作，实现复用==</p><p><code>&lt;T&gt;</code>: T为类型变量，可以是任意合法的类型变量名称</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Inter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token constant">T</span>
    age<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h3><blockquote><p>使用extends, 为类型变量添加约束</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">Ilength</span> <span class="token punctuation">{</span>
   length<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Ilength<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
   <span class="token comment">// 某些类型如number，Boolean没有length属性，所以对泛型添加约束，表示传入的类型必须具有length属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="keyof关键字-接受一个对象类型-生成键名称的联合类型" tabindex="-1"><a class="header-anchor" href="#keyof关键字-接受一个对象类型-生成键名称的联合类型" aria-hidden="true">#</a> keyof关键字：接受一个对象类型，生成键名称的联合类型</h4><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> value2<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类型变量K必须是类型变量T中存在的属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="泛型工具类型-ts内置类型" tabindex="-1"><a class="header-anchor" href="#泛型工具类型-ts内置类型" aria-hidden="true">#</a> 泛型工具类型（Ts内置类型）</h3><ol><li><strong>Partial&lt; Type&gt;</strong>: 构造一个新类型，将Type中所有属性都设置为可选</li><li><strong>Readonly&lt; Type&gt;</strong> 构造一个新类型， 将Type中所有属性都设置为只读</li><li><strong>Pick&lt; Type&gt;</strong>: 构造一个新类型，从Type中选择一组属性来构造新类型</li><li><strong>Record&lt; Key，Type&gt;</strong>: 构造一个新对象类型，属性键为Key，属性类型为Type</li></ol><hr><h2 id="类、接口、函数的类型兼容性" tabindex="-1"><a class="header-anchor" href="#类、接口、函数的类型兼容性" aria-hidden="true">#</a> 类、接口、函数的类型兼容性</h2><ol><li><strong>类、接口的兼容性</strong>：成员多的可以 赋值给成员少的（多的兼容少的）</li><li><strong>函数的兼容性</strong>：参数少的可以赋值给参数多的，因为JS的机制中，省略函数参数是常见的</li></ol><hr><h2 id="类型声明文件" tabindex="-1"><a class="header-anchor" href="#类型声明文件" aria-hidden="true">#</a> 类型声明文件</h2><ol><li><h4 id="ts文件" tabindex="-1"><a class="header-anchor" href="#ts文件" aria-hidden="true">#</a> .ts文件</h4><p>既包含类型信息又包含可执行代码的 <strong>代码实现文件</strong></p></li><li><h4 id="d-ts文件" tabindex="-1"><a class="header-anchor" href="#d-ts文件" aria-hidden="true">#</a> .d.ts文件</h4><p>只包含类型信息的<strong>类型声明文件</strong>，为js文件提供类型信息</p></li></ol><hr><h2 id="ts新增类型" tabindex="-1"><a class="header-anchor" href="#ts新增类型" aria-hidden="true">#</a> Ts新增类型</h2><table><thead><tr><th>类型</th><th></th><th>描述</th></tr></thead><tbody><tr><td>字面量类型</td><td></td><td>任何字符串都可以作为类型，适合于<strong>有明确可选值的类型</strong></td></tr><tr><td>any</td><td></td><td>任意类型（关闭了类型限制，也就是原生js的写法），不建议使用，<strong>赋值给其他变量不会报错</strong></td></tr><tr><td>unknown</td><td></td><td>未知类型的值，<strong>==赋值给其他变量会报错==</strong></td></tr><tr><td></td><td>s = e as string</td><td>通过类型断言，==指明unknown的变量类型==</td></tr><tr><td>void</td><td></td><td>空值，没有返回值（函数没有返回值会自动视为any）</td></tr><tr><td>never</td><td></td><td>没有值，不能是任何值（一般用于报错功能的函数）</td></tr><tr><td>tuple</td><td></td><td>元组类型，固定长度的数组</td></tr><tr><td>enum</td><td></td><td>枚举类型，成员具有自增长行为</td></tr></tbody></table><hr><h2 id="编译选项" tabindex="-1"><a class="header-anchor" href="#编译选项" aria-hidden="true">#</a> 编译选项</h2><p>自动监视代码变化，自动编译ts文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>&gt;&gt;&gt;tsc xxx<span class="token punctuation">.</span>js  <span class="token operator">-</span>w		<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">-</span>w  监视选项，自动监视文件变化进行编译
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成tsconfig.json配置文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>&gt;&gt;&gt;tsc <span class="token operator">-</span>init

&gt;&gt;&gt;tsc 	监视所有ts文件变化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tsconfig-json-ts编译器的配置文件" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-ts编译器的配置文件" aria-hidden="true">#</a> tsconfig.json(ts编译器的配置文件)</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">//&quot;include&quot;   用来指定哪些ts文件需要被编译</span>
    <span class="token comment">// 路径 ./src/**/*</span>
    <span class="token comment">//		**表示任意目录</span>
    <span class="token comment">//		*表示任意文件</span>
  
	<span class="token property">&quot;include&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">&quot;./src/**/*&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">//&quot;exclude&quot; 不需要被编译的文件目录</span>
    <span class="token comment">// 默认值：[&#39;node_module&#39;,&#39;bower_component&#39;,&#39;js&#39;]</span>
  
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">&quot;./src/hello/**/*&quot;</span>		<span class="token comment">//hello目录下的文件不需要被编译</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  
    <span class="token comment">//编译器选项</span>
    <span class="token property">&quot;compileOptions&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//表示ts编译后的ES版本</span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span><span class="token string">&quot;ES6&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">//module  指定要使用的模块化规范</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span><span class="token string">&quot;ES6&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">//lib 项目中要使用到的库</span>
        <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    
        <span class="token comment">//outDir  编译后文件的所在目录</span>
        <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span><span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
     
        <span class="token comment">//outFile  将代码合并为一个文件</span>
        <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/app/js&quot;</span><span class="token punctuation">,</span>
    
        <span class="token comment">//是否对js文件进行编译(也就是把js文件也一起放到ts编译后的文件夹里去)，默认为false</span>
        <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>
   
        <span class="token comment">//是否检查js代码符合语法规范，默认是false</span>
        <span class="token property">&quot;checkJS&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    
        <span class="token comment">//是否移除注释</span>
        <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
 
        <span class="token comment">//不生成编译的文件</span>
        <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    
        <span class="token comment">//当有错误时不生成编译后的文件</span>
        <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    
        <span class="token comment">//设置编译后的文件是否为严格模式 </span>
        <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    
        <span class="token comment">//不允许隐式的any类型</span>
        <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    
        <span class="token comment">//不允许不明确类型的this</span>
        <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    
        <span class="token comment">//不允许空值</span>
     	<span class="token property">&quot;srictNullChecks&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    
        <span class="token comment">//所有严格检查的总开关</span>
        <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack配置" tabindex="-1"><a class="header-anchor" href="#webpack配置" aria-hidden="true">#</a> webpack配置</h3><p>配置babel</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@babel/core   
@babel/preset-env
babel-loader
core-js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>loader的执行顺序是从下往上执行的</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>      <span class="token punctuation">{</span>
        test<span class="token operator">:</span> /\\.less$/<span class="token punctuation">,</span>
        <span class="token comment">// loader的执行顺序是从下往上执行的</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;less-loader&quot;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h2><h3 id="类装饰器-classdecorator" tabindex="-1"><a class="header-anchor" href="#类装饰器-classdecorator" aria-hidden="true">#</a> 类装饰器 @ClassDecorator</h3><h3 id="方法装饰器-methoddecorator" tabindex="-1"><a class="header-anchor" href="#方法装饰器-methoddecorator" aria-hidden="true">#</a> 方法装饰器 @MethodDecorator</h3><h3 id="属性装饰器-propertydecorator" tabindex="-1"><a class="header-anchor" href="#属性装饰器-propertydecorator" aria-hidden="true">#</a> 属性装饰器 @PropertyDecorator</h3><h3 id="参数装饰器-parameterdecorator" tabindex="-1"><a class="header-anchor" href="#参数装饰器-parameterdecorator" aria-hidden="true">#</a> 参数装饰器 @ParameterDecorator</h3><pre><code>元数据
</code></pre>`,72),p=[o];function l(i,c){return s(),a("div",null,p)}const d=n(t,[["render",l],["__file","TypeScript.html.vue"]]);export{d as default};
