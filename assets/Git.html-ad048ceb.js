import{_ as s,o as i,c as t,a as n,b as a,d as e}from"./app-52249f43.js";const l={},r=n(`<h2 id="版本控制系统" tabindex="-1"><a class="header-anchor" href="#版本控制系统" aria-hidden="true">#</a> 版本控制系统</h2><p>操作简便，易于对比，易于回溯，不易丢失，写作方便</p><h3 id="版本控制系统的分类" tabindex="-1"><a class="header-anchor" href="#版本控制系统的分类" aria-hidden="true">#</a> 版本控制系统的分类</h3><h4 id="分布式版本控制系统-git" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统-git" aria-hidden="true">#</a> 分布式版本控制系统：Git</h4><p><strong>特点</strong>：联网运行，基于服务器，客户端的运行模式</p><blockquote><p>1.服务器保存文件的所有更新记录，</p><p>2.客户端是服务器的完整备份，并不只是保留最新的文件版本</p></blockquote><p><strong>优点</strong>：</p><blockquote><ul><li>联网运行，支持多人协作</li><li>客户端断网后支持离线本地提交版本更新</li><li>服务器故障或损坏或，可使用任意一个客户端的备份进行恢复</li></ul></blockquote><hr><h4 id="集中化版本控制系统-svn" tabindex="-1"><a class="header-anchor" href="#集中化版本控制系统-svn" aria-hidden="true">#</a> 集中化版本控制系统：SVN</h4><p><strong>特点</strong>：基于服务器，客户端的运行模式</p><blockquote><p>1.服务器保存文件的所有更新记录，</p><p>2.客户端只保留最新的文件版本</p></blockquote><p><strong>优点</strong>：</p><blockquote><ul><li>联网运行，支持多人协作</li><li>客户端断网后支持离线本地提交版本更新</li><li>服务器故障或损坏或，可使用任意一个客户端的备份进行恢复</li></ul></blockquote><p><strong>缺点</strong>：</p><blockquote><ul><li>不支持离线提交把版本更新</li><li>中心服务器崩溃后，所有人无法正常工作</li><li>版本数据库故障后，所有历史更新记录都会丢失</li></ul></blockquote><hr><h4 id="本地版本控制系统" tabindex="-1"><a class="header-anchor" href="#本地版本控制系统" aria-hidden="true">#</a> 本地版本控制系统：</h4><p><strong>缺点</strong>：</p><blockquote><ul><li>单机运行，不支持多人协作</li><li>版本数据库故障后，所有历史记录都会丢失</li></ul></blockquote><h2 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h2><p>Git是一个开源的分布式版本控制系统，项目越大时越复杂</p><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性：</h4><ol><li>直接记录快照，而非差异比较</li></ol><blockquote><p><strong>Git快照</strong></p><p>在原有文件版本基础上重新生成一份新的文件，类似于备份，若文件没有修改，则不再重新存储该文件，只保留一个链接指向之前存储的文件</p><p>特点：占用磁盘空间较大，但版本切换时非常快，是以空间换时间</p></blockquote><ol start="2"><li>近乎所有操作都是本地执行</li></ol><blockquote><p>绝大多是操作都只需要访问本地文件和资源</p><p>断网后依旧可以在本地对项目进行版本管理</p><p>联网后，把本地修改的记录同步到云端服务器即可</p></blockquote><h3 id="git-配置" tabindex="-1"><a class="header-anchor" href="#git-配置" aria-hidden="true">#</a> Git 配置</h3><p>可以通过三个地方的三个文件设置<code>git</code>配置参数，分别代表三个不同的作用域：</p><p>优先度从高到低</p><ol><li><p><strong><code>.git/config</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><strong>仓库配置</strong>：通过<code>--local</code>命令配置，作用域为当前版本库，配置写入<code>.git/config</code>文件中，优先度第一；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--local</span> user.name <span class="token string">&quot;张三&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--local</span> user.email test1@git.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>~/.gitconfig</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><strong>用户配置</strong>：通过<code>--global</code>命令配置，作用域为当前系统用户，配置写入<code>~/.gitconfig</code>文件，优先度第二；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;张三哥哥&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email test2@git.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>/etc/gitconfig</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--system</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><strong>系统配置</strong>：通过<code>--system</code>命令配置，作用域为当前操作系统<strong>所有用户</strong>，配置写入<code>/etc/gitconfig</code>文件，优先度第三；这里需要管理员身份运行<code>git bash</code>才有修改权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--system</span> user.name <span class="token string">&quot;张三爸爸&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--system</span> user.email test3@git.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h4 id="查看配置" tabindex="-1"><a class="header-anchor" href="#查看配置" aria-hidden="true">#</a> 查看配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> .git/config
<span class="token function">cat</span> ~/.gitconfig
<span class="token function">cat</span> /etc/gitconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除错误配置" tabindex="-1"><a class="header-anchor" href="#删除错误配置" aria-hidden="true">#</a> 删除错误配置</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--unset</span> <span class="token operator">&lt;</span>参数名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用户信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name “jiahua”
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name “2014377205@qq.com”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>只运行一次，永久生效</strong>：全局配置文件，1次运行永久生效</p><p>查看全局配置项</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">git</span> config <span class="token parameter variable">--list</span> <span class="token parameter variable">--global</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看命令手册</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token punctuation">(</span>某个命令<span class="token punctuation">)</span>	//在浏览器中获取完整的帮助信息
get <span class="token punctuation">(</span>某个命令<span class="token punctuation">)</span> <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git的三个区域" tabindex="-1"><a class="header-anchor" href="#git的三个区域" aria-hidden="true">#</a> Git的三个区域</h3><ol><li><h4 id="工作区-本地文件夹-working-tree" tabindex="-1"><a class="header-anchor" href="#工作区-本地文件夹-working-tree" aria-hidden="true">#</a> 工作区（本地文件夹）<code>working tree</code></h4><p>工作区中的文件只要通过<code>git add</code>命令添加进了<code>Git</code>仓库，就会被追踪。</p></li><li><h4 id="暂存区stage" tabindex="-1"><a class="header-anchor" href="#暂存区stage" aria-hidden="true">#</a> 暂存区<code>stage</code></h4><p>通过<code>git status</code>查看<code>git</code>状态时，<strong>红色</strong>的文件表示在<strong>工作区</strong>；<strong>绿色</strong>的文件表示在<strong>暂存区</strong>：</p><p>git commit - m “提交信息”</p></li><li><h4 id="版本库repository" tabindex="-1"><a class="header-anchor" href="#版本库repository" aria-hidden="true">#</a> 版本库<code>repository</code></h4><p>git push -u origin [远程分支]</p></li></ol><h4 id="工作区中文件的四种状态" tabindex="-1"><a class="header-anchor" href="#工作区中文件的四种状态" aria-hidden="true">#</a> 工作区中文件的四种状态</h4><blockquote><p>未被Git管理：<strong>未跟踪</strong>（新建的文件）</p><p><strong>已被Git管理</strong>：</p><p><strong>未修改</strong>（工作区中文件内容和仓库中文件内容保持一致）</p><p><strong>已修改</strong>（工作区中文件内容和仓库中文件内容保持一致）</p><p><strong>已暂存</strong>（工作区中被修改的文件已被放在暂存区，准备将修改后的文件放到Git仓库中）</p></blockquote><h4 id="git的工作流程" tabindex="-1"><a class="header-anchor" href="#git的工作流程" aria-hidden="true">#</a> Git的工作流程</h4><p><strong>工作区</strong>：暂存修改-------&gt; <strong>暂存区</strong> 提交更新 -----------&gt; <strong>Git仓库</strong></p><h3 id="git仓库的两种获取方式" tabindex="-1"><a class="header-anchor" href="#git仓库的两种获取方式" aria-hidden="true">#</a> Git仓库的两种获取方式</h3><ol><li>将尚未进行版本控制的本地目录转换为Git仓库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>仓库地址 <span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>从其他服务器克隆一个已存在的Git仓库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>仓库地址 <span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="git基本命令" tabindex="-1"><a class="header-anchor" href="#git基本命令" aria-hidden="true">#</a> Git基本命令</h3><h4 id="_1-初始化git仓库" tabindex="-1"><a class="header-anchor" href="#_1-初始化git仓库" aria-hidden="true">#</a> 1.初始化Git仓库</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-检查文件的状态" tabindex="-1"><a class="header-anchor" href="#_2-检查文件的状态" aria-hidden="true">#</a> 2.检查文件的状态</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status    //查看文件处于什么状态
<span class="token comment"># 精简方式显示文件状态</span>
<span class="token function">git</span> status <span class="token parameter variable">-s</span>  <span class="token punctuation">(</span>short<span class="token punctuation">)</span>		//??表示未跟踪
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-跟踪新文件" tabindex="-1"><a class="header-anchor" href="#_3-跟踪新文件" aria-hidden="true">#</a> 3.跟踪新文件</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add (文件)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A表示已将文件添加到暂存区</p><h4 id="_4-提交更新" tabindex="-1"><a class="header-anchor" href="#_4-提交更新" aria-hidden="true">#</a> 4.提交更新</h4><p>将暂存区中的文件提交到Git仓库的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-对已提交的文件进行修改" tabindex="-1"><a class="header-anchor" href="#_5-对已提交的文件进行修改" aria-hidden="true">#</a> 5.对已提交的文件进行修改</h4><h4 id="_6-暂存已修改的文件" tabindex="-1"><a class="header-anchor" href="#_6-暂存已修改的文件" aria-hidden="true">#</a> 6.暂存已修改的文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span>  
<span class="token comment"># 向暂存区中一次性添加多个文件 (经常使用)</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开始跟踪新文件，把已跟踪且已修改的文件放到暂存区，把有冲突的文件标记已解决状态</p><h4 id="_7-提交已暂存的文件" tabindex="-1"><a class="header-anchor" href="#_7-提交已暂存的文件" aria-hidden="true">#</a> 7.提交已暂存的文件</h4><p>再次运行git commit -m “提交消息”</p><h4 id="_8-撤销对文件的修改-慎重操作" tabindex="-1"><a class="header-anchor" href="#_8-撤销对文件的修改-慎重操作" aria-hidden="true">#</a> 8.撤销对文件的修改（慎重操作）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -- index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把对工作区中对应文件的修改，还原成Git仓库中所保存的版本</p><p>操作的结果：所有的修改会丢失，且无法恢复，危险性高，慎重操作</p><p>本质：用Git仓库总保存的文件，覆盖工作区中指定的文件</p><h4 id="_9-跳过使用暂存区域" tabindex="-1"><a class="header-anchor" href="#_9-跳过使用暂存区域" aria-hidden="true">#</a> 9.跳过使用暂存区域</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span>   //-a表示跳过暂存区
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_10-移除文件" tabindex="-1"><a class="header-anchor" href="#_10-移除文件" aria-hidden="true">#</a> 10.移除文件</h4><p>移除工作区和暂存区中的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>	//工作区和仓库中同时移除对应的文件
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span>    //只移除仓库中的文件，保留工作区中的文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-忽略文件跟踪" tabindex="-1"><a class="header-anchor" href="#_11-忽略文件跟踪" aria-hidden="true">#</a> 11.忽略文件跟踪</h4><h5 id="gitignore文件" tabindex="-1"><a class="header-anchor" href="#gitignore文件" aria-hidden="true">#</a> .gitignore文件</h5><p><code>.gitignore</code>文件配置不被<code>git</code>跟踪的文件。被添加到<code>.gitignore</code>文件中的文件名，将不会被<code>git</code>追踪<br> glob模式：简化了的正则表达式<br> 星号匹配0个或多个任意字符<br> [abc]匹配任意一个列在方括号中的字符</p><blockquote><p><strong>通常用来忽略本地开发中的下列文件：</strong></p><ul><li><code>.idea</code>、<code>.settings</code>、<code>.classpath</code>等无用配置；</li><li>系统自动生成的文件：各种<code>IDE</code>的配置文件，项目依赖文件等；如<code>vue-cli</code>创建项目中<code>node_modules</code>目录下的各种依赖文件；</li><li>编译生成的中间文件，可执行文件；</li><li>敏感的配置文件和本地不想提交的脚本文件等；</li></ul></blockquote><h4 id="_12-查看提交历史" tabindex="-1"><a class="header-anchor" href="#_12-查看提交历史" aria-hidden="true">#</a> 12.查看提交历史</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log	//按时间顺序列出所有的提交历史，最近的提交排最上面
<span class="token function">git</span> log <span class="token parameter variable">-n</span>    //最近n条提交历史
<span class="token function">git</span> log <span class="token parameter variable">-2</span> <span class="token parameter variable">--prett</span><span class="token operator">=</span>online	//在一行上展示最近2条提交历史
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-回退到指定的版本" tabindex="-1"><a class="header-anchor" href="#_13-回退到指定的版本" aria-hidden="true">#</a> 13.回退到指定的版本</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span>  根据指定的提交ID 回退到指定版本
<span class="token function">git</span> reflog <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline  //在旧版本中查看命令操作历史
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="git分支" tabindex="-1"><a class="header-anchor" href="#git分支" aria-hidden="true">#</a> Git分支</h3>`,91),d=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"分支的概念"),a("p",null,[e("“平行宇宙中做事情，互不干扰，最后合并时，两边的事情同时完成”"),a("br"),e(" 在实际开发种，进行多人协作开发时，为了防止相互干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发")])],-1),o=n(`<h4 id="master主分支" tabindex="-1"><a class="header-anchor" href="#master主分支" aria-hidden="true">#</a> master主分支</h4><blockquote><p>初始化本地Git仓库时，默认创建一个名字叫master的分支(也叫主分支)，用来保存和记录整个项目已完成的功能代码，<strong>不允许程序员直接在master主分支上进行功能开发</strong></p></blockquote><h4 id="功能分支" tabindex="-1"><a class="header-anchor" href="#功能分支" aria-hidden="true">#</a> 功能分支</h4><blockquote><p><strong>专门用力开发新功能的分支，是临时从master分叉出来的</strong>，新功能开发完成后，最终合并到master主分支上，功能分支生命周期结束</p></blockquote><h4 id="_1-查看分支列表" tabindex="-1"><a class="header-anchor" href="#_1-查看分支列表" aria-hidden="true">#</a> 1.查看分支列表</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch		//查看当前Git仓库所有分支的列表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-创建新分支" tabindex="-1"><a class="header-anchor" href="#_2-创建新分支" aria-hidden="true">#</a> 2.创建新分支</h4><p>基于当前所处的分支，创建新分支，新分支的代码和当前分支完全一样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch  分支名称		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-切换分支" tabindex="-1"><a class="header-anchor" href="#_3-切换分支" aria-hidden="true">#</a> 3.切换分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),c=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"分支的快速创建和切换"),a("p",null,"创建一个分支并切换到该分支上"),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"git"),e(" checkout "),a("span",{class:"token parameter variable"},"-b"),e(" 分支名称   "),a("span",{class:"token comment"},"#等价于 git branch 分支名称; git checkout 分支名称;"),e(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])])],-1),p=n(`<h4 id="_4-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-合并分支" aria-hidden="true">#</a> 4.合并分支</h4><p>将功能分支中完成的代码合并到当前主分支上（如 合并到master主分支，先切换到master分支，再执行merge进行合并）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge login	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-删除分支" tabindex="-1"><a class="header-anchor" href="#_5-删除分支" aria-hidden="true">#</a> 5.删除分支</h4><p>删除某个分支时，不能处于这个分支，（不能坐在船上毁掉这艘船）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-遇到冲突时的分支合并" tabindex="-1"><a class="header-anchor" href="#_6-遇到冲突时的分支合并" aria-hidden="true">#</a> 6.遇到冲突时的分支合并</h4><p>解决了冲突后</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add .
git commit -m &quot;已解决冲突并提交&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-将本地仓库推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#_7-将本地仓库推送到远程仓库" aria-hidden="true">#</a> 7.将本地仓库推送到远程仓库</h4><p>只在第一次推送时需要带-u参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u  远程仓库别名  本地分支名称：远程仓库名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-查看远程仓库中所有的分支列表" tabindex="-1"><a class="header-anchor" href="#_8-查看远程仓库中所有的分支列表" aria-hidden="true">#</a> 8.查看远程仓库中所有的分支列表</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote show 远程仓库名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-跟踪分支" tabindex="-1"><a class="header-anchor" href="#_9-跟踪分支" aria-hidden="true">#</a> 9.跟踪分支</h4><p>从远程仓库中，把远程分支下载到本地仓库中，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout 远程分支名称
<span class="token comment">#例如：git checkout payment</span>

<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 本地分支名称 远程仓库名称/远程分支名称
<span class="token comment">#例如：git checkout -b payment origin/zhifu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-拉取远程分支" tabindex="-1"><a class="header-anchor" href="#_10-拉取远程分支" aria-hidden="true">#</a> 10.拉取远程分支</h4><p>把远程分支上最新的代码下载并合并到本地对应的分支中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull 远程分支   <span class="token comment"># 等价于 git fetch; git merge;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_11-删除远程分支" tabindex="-1"><a class="header-anchor" href="#_11-删除远程分支" aria-hidden="true">#</a> 11.删除远程分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> 远程分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_12-强制删除分支" tabindex="-1"><a class="header-anchor" href="#_12-强制删除分支" aria-hidden="true">#</a> 12.强制删除分支</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名称	<span class="token comment"># -d未合并会报错，-D不管有没有合并，都强制删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git常用指令" tabindex="-1"><a class="header-anchor" href="#git常用指令" aria-hidden="true">#</a> Git常用指令</h3><ol><li><h4 id="创建git仓库" tabindex="-1"><a class="header-anchor" href="#创建git仓库" aria-hidden="true">#</a> 创建git仓库</h4></li><li><p>打开git bash，将远程仓库初始化到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token string">&#39;仓库地址&#39;</span>		<span class="token comment">#将远程仓库克隆到本地</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当前一定会有一条主分支master 或 main</p></li><li><p>创建开发分支develop</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> develop			<span class="token comment">#创建并切换到develop分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在develop分支上进行开发</p></li><li><p><code>git add .</code>跟踪文件内容变化</p></li><li><p><code>git commit -m “提交信息”</code></p></li><li><p><code>git push -u origin [要推送的仓库分支]</code></p></li><li><p>远程仓库的develop分支上有了开发的内容</p></li><li><p>将develop分支上的修改（确保已经提交和推送到远程仓库的分支上），合并到master或main</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main    //切到想要合并到的分支main

<span class="token function">git</span> merge develop    //将develop分支merge到main上

<span class="token function">git</span> push   	//将此次merge推送到远程仓库
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果合并错了，想回退 （将develop分支合并到main后想回退，即<strong>想将main恢复到合并前的状态</strong>）</p><ol><li><p>先执行git reflog，找到合并操作前的版本号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog		//打印每个分支上进行操作的节点的版本号
//类似打印内容如下
8d00b28 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> devolop, origin/main, origin/devolop, origin/HEAD, main<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: checkout: moving from main to devolop
8d00b28 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> devolop, origin/main, origin/devolop, origin/HEAD, main<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: merge devolop: Fast-forward
9d8ea0b HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: checkout: moving from devolop to main
8d00b28 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> devolop, origin/main, origin/devolop, origin/HEAD, main<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>: commit: 功能1的
修改
9d8ea0b HEAD@<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span>: checkout: moving from main to devolop
9d8ea0b HEAD@<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>: merge devolop: Fast-forward
a8d4a6a HEAD@<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span>: checkout: moving from devolop to main
9d8ea0b HEAD@<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span>: commit: 新功能1提交
a8d4a6a HEAD@<span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span>: checkout: moving from main to devolop
a8d4a6a HEAD@<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>: commit: 初始化提交
794d594 HEAD@<span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span>: clone: from github.com:Amoryu/TestRepos.git

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切换到main分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>版本号<span class="token punctuation">]</span>	
	
//例如  <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 9e8a44c	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将这次的reset回退进行强推</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-f</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，main分支就回退到合并前的状态</p></li></ol></li></ol><h2 id="开源" tabindex="-1"><a class="header-anchor" href="#开源" aria-hidden="true">#</a> 开源</h2><p>开放源代码,任何人都可以去查看修改和使用源代码</p><h4 id="开源许可协议" tabindex="-1"><a class="header-anchor" href="#开源许可协议" aria-hidden="true">#</a> 开源许可协议</h4><p>限制使用者的适用范围，保护作者的权力，每个开源项目都应该遵守开源许可协议 (Open Source License)</p><h5 id="常见的5种开源协议" tabindex="-1"><a class="header-anchor" href="#常见的5种开源协议" aria-hidden="true">#</a> 常见的5种开源协议</h5><ol><li>BSD</li><li>Apache Licence 2.0</li><li>LGPL</li><li><strong>GPL</strong>：（GNU General Public License）强制开源</li></ol><blockquote><ul><li>具有传染性的一种开源协议，不允许修改后和衍生的代码作为比原的商业软件发布和销售</li><li>使用GPL的著名的软件项目：Linux</li></ul></blockquote><ol start="5"><li><strong>MIT</strong>：(建议使用)</li></ol><blockquote><ul><li>是目前限制最少的协议，唯一的条件：在修改后的代码或者发行包种，必须包含原作者的许可信息</li><li>使用MIT的软件项目：jQuery，Node.js</li></ul></blockquote>`,35),u=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"为什么要开源"),a("ol",null,[a("li",null,"开源让使用者更多的控制权"),a("li",null,"让学习更加容易"),a("li",null,"才有真正的安全")]),a("p",null,[a("strong",null,"开源项目托管平台"),e(": Github、GitLab、Gitee")])],-1),h=n(`<h4 id="远程仓库的两种访问方式" tabindex="-1"><a class="header-anchor" href="#远程仓库的两种访问方式" aria-hidden="true">#</a> 远程仓库的两种访问方式</h4><p><strong>HTTPS</strong>：零配置。但每次访问仓库时都要输入账号密码才能访问成功</p><p><strong>SSH</strong>：需要进行额外的配置，但是配置成功后，不需要重复输入账号密码（实际开发中推荐使用）</p><blockquote><p>SSH key 作用：实现本地仓库和Github·之间<strong>免登录</strong>的<strong>加密数据传输</strong></p><p>id_rsa (私钥文件，存放在客户端电脑中即可)</p><p>id_ras_pub （公钥文件，需要配置到Github中）</p></blockquote><h4 id="生成ssh-key" tabindex="-1"><a class="header-anchor" href="#生成ssh-key" aria-hidden="true">#</a> 生成SSH key</h4><p>Git Bash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;2014377205@qq.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>id_rsa和id_rsa_pub在C盘查找一下</p><h4 id="配置ssh-key" tabindex="-1"><a class="header-anchor" href="#配置ssh-key" aria-hidden="true">#</a> 配置SSH key</h4><p>在C盘下的.ssh文件夹中，用记事本打开id_rsa_pub，复制里面全部内容。 若配置成功，则如下</p>`,10),g=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"LF和CRLF是什么"),a("h4",{id:"lf和crlf区别",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#lf和crlf区别","aria-hidden":"true"},"#"),e(" LF和CRLF区别")]),a("p",null,[a("code",null,"CRLF"),e(": 回车换行("),a("strong",null,"C"),e("arriage "),a("strong",null,"R"),e("eturn "),a("strong",null,"L"),e("ine "),a("strong",null,"F"),e('eed的缩写) 即"\\r\\n", windows系统环境下的换行方式')]),a("p",null,[a("code",null,"LF"),e(": 换行("),a("strong",null,"L"),e("ine "),a("strong",null,"F"),e('eed的缩写) 即"\\n", Linux系统环境下的换行方式')]),a("p",null,[a("strong",null,"为了避免换行符在 git 提交时的差异，一般要指定使用 lf 或 crlf。一般使用 lf，并配置禁止 git pull 时把代码的换行符转换成当前系统的换行符。")]),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"git"),e(" config "),a("span",{class:"token parameter variable"},"--global"),e(" core.autocrlf "),a("span",{class:"token boolean"},"false"),e(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])])],-1),b=[r,d,o,c,p,u,h,g];function v(m,k){return i(),t("div",null,b)}const x=s(l,[["render",v],["__file","Git.html.vue"]]);export{x as default};
