import{_ as n,o as a,c as s,a as t}from"./app-52249f43.js";const e={},p=t(`<h1 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式" aria-hidden="true">#</a> 响应式</h1><h2 id="vue2-x和vue3-x响应式原理对比" tabindex="-1"><a class="header-anchor" href="#vue2-x和vue3-x响应式原理对比" aria-hidden="true">#</a> Vue2.x和Vue3.x响应式原理对比</h2><h3 id="vue2" tabindex="-1"><a class="header-anchor" href="#vue2" aria-hidden="true">#</a> Vue2</h3><blockquote><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>对象类型：通过Object.defineProperty（）对数据的读取和修改进行拦截（数据劫持）</p><p>数组类型：通过重写更新数组的一系列方法实现拦截（对数组的变更方法进行包裹）</p><h4 id="存在问题" tabindex="-1"><a class="header-anchor" href="#存在问题" aria-hidden="true">#</a> 存在问题</h4><ul><li><p>直接新增或者删除属性，界面不会自动更新</p><blockquote><h4 id="需要调用函数才能实现" tabindex="-1"><a class="header-anchor" href="#需要调用函数才能实现" aria-hidden="true">#</a> 需要调用函数才能实现</h4><p>追加响应式属性 <strong>Vue.set</strong>(对象，‘属性’，‘属性值’)或者this.$set</p><p>移除响应式数据：<strong>Vue.delete</strong>(对象，‘属性’，‘属性值’)</p></blockquote></li><li><p>直接通过下标修改数组，界面不会自动更新</p></li></ul></blockquote><h3 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h3><blockquote><h3 id="实现原理-1" tabindex="-1"><a class="header-anchor" href="#实现原理-1" aria-hidden="true">#</a> 实现原理</h3><h4 id="通过proxy-代理" tabindex="-1"><a class="header-anchor" href="#通过proxy-代理" aria-hidden="true">#</a> 通过Proxy（代理）</h4><blockquote><p>==拦截对象中任意属性数据的变化，包括属性的读写，添加，删除==</p></blockquote><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
 	<span class="token comment">//获取属性时调用</span>
 	<span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">有人读取了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>properName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
   		<span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">)</span>
 	<span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment">//修改或追加属性时调用</span>
     <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">有人修改了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>properName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
           Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment">// 删除属性时调用</span>
     <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> properName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">有人删除了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>properName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
           <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">)</span> <span class="token comment">//delete返回值是删除成功与否的布尔值</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="通过reflect-反射" tabindex="-1"><a class="header-anchor" href="#通过reflect-反射" aria-hidden="true">#</a> 通过Reflect（反射）</h4><blockquote><p>==对源对象的指定属性的进行操作==</p></blockquote><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> properName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><blockquote><p>Reflect.set(target, properName,value)</p></blockquote><blockquote><p>Reflect.deleteProperty(target, properName)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div></blockquote></blockquote><h2 id="响应式的实现" tabindex="-1"><a class="header-anchor" href="#响应式的实现" aria-hidden="true">#</a> 响应式的实现</h2><ol><li><h4 id="通过手动引入ref-reactive去定义响应式数据" tabindex="-1"><a class="header-anchor" href="#通过手动引入ref-reactive去定义响应式数据" aria-hidden="true">#</a> 通过手动引入ref, reactive去定义响应式数据</h4></li><li><h4 id="ref用于定义基本类型-num-string-boolean-的响应式数据-需要通过-value获取值" tabindex="-1"><a class="header-anchor" href="#ref用于定义基本类型-num-string-boolean-的响应式数据-需要通过-value获取值" aria-hidden="true">#</a> ref用于定义基本类型（num,string,boolean...）的响应式数据，（需要通过.value获取值）</h4><p><strong>原理</strong>：Object.defineProperty()的get和set</p><p>ref会创建一个包含响应式数据的引用对象（<strong>RefImpl对象：引用（实现的）实例对象</strong>）,修改和获取数据时，实际是操作数据的.value值，在template模板中，不需要写.value, Vue3会自动读取其.value值</p><p>包装一个引用类型数据时，底层其实是借助reactive去实现</p><p>通过ref获取组件实例时，需要通过下面的形式</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

const inputRef = ref(null)	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h4 id="reactive用于定义引用类型-对象-数组-map-set-的响应式数据" tabindex="-1"><a class="header-anchor" href="#reactive用于定义引用类型-对象-数组-map-set-的响应式数据" aria-hidden="true">#</a> reactive用于定义引用类型（对象，数组，Map，Set...）的响应式数据</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">//ref(&#39;hhhhh&#39;)   ref(true)</span>
    <span class="token keyword">const</span> objValue <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jiahua&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="响应式数据的判断" tabindex="-1"><a class="header-anchor" href="#响应式数据的判断" aria-hidden="true">#</a> 响应式数据的判断</h2><blockquote><p>isRef</p><p>isReactive</p><p>isReadOnly</p><p>isProxy</p></blockquote><h1 id="setup函数" tabindex="-1"><a class="header-anchor" href="#setup函数" aria-hidden="true">#</a> setup函数</h1><ol><li><h4 id="用法1-在script中使用setup函数" tabindex="-1"><a class="header-anchor" href="#用法1-在script中使用setup函数" aria-hidden="true">#</a> 用法1： 在script中使用setup函数，</h4><p>==定义的属性和方法需要手动return出去==</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
        
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>props：值为对象，包含（外部传递过来，且内部已经声明接收的属性（放在与setup平级的props属性））</p></li><li><p>context: 上下文对象</p><ol><li>attrs：值为对象：包含组件传递过来，但没有在props中配置的属性,相当于<code>this.$attrs</code></li><li>slots：收到的插槽内容，相当于<code>this.$slots</code></li><li>emits：自定义事件的函数，相当于\`\`this.$emit\`</li></ol></li></ol></li><li><h4 id="用法2-setup语法糖-直接在script标签中加上setup属性" tabindex="-1"><a class="header-anchor" href="#用法2-setup语法糖-直接在script标签中加上setup属性" aria-hidden="true">#</a> ==用法2： setup语法糖==（直接在script标签中加上setup属性）</h4><p>==不用再将每个属性或方法return出去==，直接可以在模板里使用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意-setup不能是一个async函数-因为返回值不再是return的对象-而是promise-模板看不到对象中的属性" tabindex="-1"><a class="header-anchor" href="#注意-setup不能是一个async函数-因为返回值不再是return的对象-而是promise-模板看不到对象中的属性" aria-hidden="true">#</a> <strong>==注意==</strong>：setup不能是一个async函数，因为返回值不再是return的对象，而是promise，模板看不到对象中的属性</h4><h4 id="后期配合suspense和异步组件使用时-也可以返回一个promise实例" tabindex="-1"><a class="header-anchor" href="#后期配合suspense和异步组件使用时-也可以返回一个promise实例" aria-hidden="true">#</a> （后期配合Suspense和异步组件使用时，也可以返回一个Promise实例）</h4><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> <strong>==注意==</strong>：</h4><blockquote><h3 id="setup执行时机" tabindex="-1"><a class="header-anchor" href="#setup执行时机" aria-hidden="true">#</a> setup执行时机</h3><p>setup在beforeCreate之前就执行一次，this是undefined</p><h3 id="setup的参数" tabindex="-1"><a class="header-anchor" href="#setup的参数" aria-hidden="true">#</a> setup的参数</h3><ul><li><p>props：值为对象，包含（外部传递过来，且内部已经声明接收的属性（放在与setup平级的props属性））</p></li><li><p>context: 上下文对象</p></li><li><p>attrs：值为对象：包含组件传递过来，但没有在props中配置的属性,相当于<code>this.$attrs</code></p></li><li><p>slots：收到的插槽内容，相当于<code>this.$slots</code></p></li><li><p>emits：自定义事件的函数，相当于\`\`this.$emit\`</p></li></ul><p>定义并使用插槽：template中使用<code>v-slot:插槽名</code></p></blockquote><hr></li></ol><h1 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h1><p><strong>返回值是RefImpl实例，需要通过.value获取</strong>(在模板中则直接使用)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span>  <span class="token punctuation">{</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVAl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>，optionObj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==<strong>有个坑：watch一个reactive的对象时</strong>==，存在一个问题，newValue和oldValue是一样的，无法正确获取oldValue</p><p>强制开启了深度监视，即使关闭deep为false，也无法关闭深度监视，即deep配置无效</p><p>但监视reactive对象中某个对象的属性时，deep配置生效</p><h2 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a> watchEffect</h2><p>watch既要指明监视的属性，也要指明监视的回调</p><p>watchEffect不用指明监视哪个属性，监视的回调中用到了哪个属性，就能监视哪个属性，类似于computed</p><p>但computed计算出来的值（回调函数的返回值），必须要有返回值</p><p>watch Effect注重过程（回调函数的函数体），不需要返回值</p><h1 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h1><ol><li><p><strong>不再有beforeCreate和created</strong>，被setup（）所替代，且==<strong>setup执行时机最早</strong>==</p></li><li><p>beforeMount-------------onBeforeMount</p></li><li><p>mounted-------------onMounted</p></li><li><p>beforeUpdate-------------onBeforeUpdate</p></li><li><p>updated-------------onUpdated</p></li><li><p>beforeUnmount-------------onBeforeUnmount</p></li><li><p>unmounted-------------onUnmounted</p></li><li><h4 id="写法" tabindex="-1"><a class="header-anchor" href="#写法" aria-hidden="true">#</a> 写法</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行mounted&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行unmounted&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> nextTick</h2><p>需要手动引入</p><h1 id="组件间通信" tabindex="-1"><a class="header-anchor" href="#组件间通信" aria-hidden="true">#</a> 组件间通信</h1><ol><li><p><strong>父传子</strong>：props传递</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h2><p>通过defineProps()</p><p>如果需要默认值，通过withDefaults宏</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
		<span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;message&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>子传父</strong>：父给子绑定自定义事件，子组件emit该事件并传参，父组件拿到自定义事件参数</p><p>不建议父给子通过props传递回调函数，要遵循单一原则，子组件不能调用别的组件的方法</p><h2 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;event2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>==如果子组件接收的自定义事件只需要完成触发，可直接写成内联的事件处理函数==</p></li><li><p><strong>深层次组件</strong>，provide和inject， vuex, pinia</p><h2 id="provide和inject" tabindex="-1"><a class="header-anchor" href="#provide和inject" aria-hidden="true">#</a> provide和inject</h2><p>用于向深层级组件传递数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//顶层组件</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;dataName&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>		<span class="token comment">//provide(&#39;注入名&#39;，&#39;注入值&#39;)</span>


<span class="token comment">//深层次组件</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;dataName&#39;</span><span class="token punctuation">)</span>	<span class="token comment">//inject(&#39;&#39;,&#39;默认值&#39;)	</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h1 id="slot插槽" tabindex="-1"><a class="header-anchor" href="#slot插槽" aria-hidden="true">#</a> slot插槽</h1><ol><li><h3 id="具名插槽" tabindex="-1"><a class="header-anchor" href="#具名插槽" aria-hidden="true">#</a> 具名插槽</h3><h4 id="组件a-vue" tabindex="-1"><a class="header-anchor" href="#组件a-vue" aria-hidden="true">#</a> 组件A.vue</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>		//定义一个名字为header的插槽，相当于小霸王的游戏卡槽
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>footer<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件b-vue" tabindex="-1"><a class="header-anchor" href="#组件b-vue" aria-hidden="true">#</a> 组件B.vue</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span>			//相当于游戏卡片
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>在插槽中放置元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>					//简写形式
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>在插槽中放置元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h3 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h3><h4 id="组件a-vue-1" tabindex="-1"><a class="header-anchor" href="#组件a-vue-1" aria-hidden="true">#</a> 组件A.vue</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in List<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token punctuation">&gt;</span></span>{{ item.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>    
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> List <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件b-vue-1" tabindex="-1"><a class="header-anchor" href="#组件b-vue-1" aria-hidden="true">#</a> 组件B.vue</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{data}<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>					//简写形式
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{data.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质：slot本质是一个函数，</p></li></ol><h1 id="内置组件" tabindex="-1"><a class="header-anchor" href="#内置组件" aria-hidden="true">#</a> 内置组件</h1><ol><li><h2 id="teleport-传送" tabindex="-1"><a class="header-anchor" href="#teleport-传送" aria-hidden="true">#</a> Teleport (传送)</h2><p>让组件瞬间移动到指定的容器或者页面结构中（一般放到body中）</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h2 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment" aria-hidden="true">#</a> Fragment</h2><p>在Vue2中，组件必须要有一个根标签</p><p>在Vue3中，组件可以没有根标签，内部会将多个标签包含在Fragment虚拟元素中</p><p>好处：减少标签层级，减小内存占用</p></li><li><h2 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense" aria-hidden="true">#</a> Suspense</h2><p>异步引入组件</p><p>传统方式引入，会导致使用了这个组件的其他组件都在等待它渲染</p><p>缺点，会导致**==抖动==**</p><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><blockquote><ol><li><h5 id="异步引入组件" tabindex="-1"><a class="header-anchor" href="#异步引入组件" aria-hidden="true">#</a> 异步引入组件</h5></li></ol></blockquote><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsuncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/components/Child.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><ol><li>使用<code>Suspense</code>标签包裹组件，并配置好<code>default</code>和<code>fallback</code></li></ol></blockquote><blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是App组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>fallback</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>加载中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ol><h1 id="其他api" tabindex="-1"><a class="header-anchor" href="#其他api" aria-hidden="true">#</a> 其他API</h1><h3 id="全局api的转移" tabindex="-1"><a class="header-anchor" href="#全局api的转移" aria-hidden="true">#</a> 全局API的转移</h3><blockquote><p>Vue2.x</p><blockquote><p>注册全局组件，全局指令等......</p></blockquote><blockquote><p>Vue.xxxx</p></blockquote><p>Vue3.x</p><blockquote><p>将全局的API，从<code>Vue.xxx</code>调整到<code>app</code>上</p></blockquote><blockquote><table><thead><tr><th>Vue2.x全局API</th><th>Vue3.x实例API</th></tr></thead><tbody><tr><td>Vue.config.xxx</td><td>app.config.xxx</td></tr><tr><td>Vue.component</td><td>移除</td></tr><tr><td>Vue.direactive</td><td>app.direactive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></blockquote></blockquote><h3 id="main-js的写法" tabindex="-1"><a class="header-anchor" href="#main-js的写法" aria-hidden="true">#</a> <strong>main.js</strong>的写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">// 引入的不再是Vue构造函数，而是一个createApp的工厂函数</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment">// 创建应用实例对象---app(类似之前Vue2中的vm,但app比vm轻量级)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 挂载  可简写为createApp(App).mount(&#39;#app&#39;)</span>

<span class="token comment">// 卸载</span>
<span class="token comment">// setTimeout(() =&gt; {</span>
<span class="token comment">//   app.unmount(&#39;#app&#39;)</span>
<span class="token comment">// }, 1000)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h3><blockquote><p>作用：创建一个ref对象，其value值指向另一个对象中的某个属性</p><p>语法：<code>const name=toRef(person,&#39;name)</code></p><p>应用：将响应式对象中的某个属性单独提供给外部使用</p></blockquote><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h3><blockquote><p>应用：将响应式对象中的全部属性提供给外部使用</p><p>该响应式对象内部的属性可直接使用</p></blockquote><h3 id="shallowref和shallowreactive" tabindex="-1"><a class="header-anchor" href="#shallowref和shallowreactive" aria-hidden="true">#</a> shallowRef和shallowReactive</h3><blockquote><p>shallowReactive只考虑第一层数据的响应式</p><p>shallowRef只处理基本数据类型的响应式，不处理对象数据类型的响应式数据</p><p>使用场景（性能优化）</p><p>如果有一对象数据，结构比较深，且变化的只是外层属性变化shallowReactive</p><p>如果有一 对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换shallowRef</p></blockquote><h3 id="readonly和shallowreadonly" tabindex="-1"><a class="header-anchor" href="#readonly和shallowreadonly" aria-hidden="true">#</a> readonly和shallowReadonly</h3><blockquote><p>readonly让一个响应式数据变为只读的（深只读）</p><p>shallowReadonly让一个响应式数据变为只读的（浅只读）</p><p>使用场景：不希望数据被修改时</p></blockquote><h3 id="toraw和markraw" tabindex="-1"><a class="header-anchor" href="#toraw和markraw" aria-hidden="true">#</a> toRaw和markRaw</h3><blockquote><h4 id="toraw" tabindex="-1"><a class="header-anchor" href="#toraw" aria-hidden="true">#</a> toRaw</h4><p>作用：将一个reactive生成的响应式数据转为普通对象</p><p>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新</p><h4 id="markraw" tabindex="-1"><a class="header-anchor" href="#markraw" aria-hidden="true">#</a> markRaw:</h4><p>作用：标记一个对象，使其永远不会再成为响应式对象</p><p>应用场景：</p><p>有些值不应该设置为响应式的，例如复杂的第三方库</p><p>当渲染具有不可变数据的大列表时，跳过响应式转换可以提高性能</p></blockquote><h3 id="customref" tabindex="-1"><a class="header-anchor" href="#customref" aria-hidden="true">#</a> customRef</h3><blockquote><p>创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显示控制</p><p>自定义ref本质是一个函数,返回一个customRef（）的方法调用，方法接收一个回调函数，在回调函数里面，返回一个包含getter和setter的对象</p></blockquote><h3 id="vue3的其他改变" tabindex="-1"><a class="header-anchor" href="#vue3的其他改变" aria-hidden="true">#</a> Vue3的其他改变</h3><blockquote><ol><li><p>data选项必须声明为一个函数</p></li><li><p>移除keycode作为v-on的修饰符</p></li><li><p>移除了v-on.native</p></li></ol><blockquote><p>父组件绑定事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Child
	v<span class="token operator">-</span>on<span class="token operator">:</span>close<span class="token operator">=</span><span class="token string">&quot;handleComponentEvent&quot;</span>
	v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">&quot;handleNativeEvent&quot;</span>
<span class="token operator">/</span><span class="token operator">&gt;</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件声明自定义事件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">]</span>		<span class="token comment">//没在这里面定义的就是内置事件</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="4"><li><p>移除过滤器filter</p></li><li><p>过渡的类名改变</p></li></ol><blockquote><p>Vue2.x写法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.v-enter,
.v-leave-to</span><span class="token punctuation">{</span>
	opacity：0
<span class="token punctuation">}</span>
<span class="token selector">.v-leave,
.v-enter-to</span><span class="token punctuation">{</span>
opacity：1
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue3.x写法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.v-enter-from,
.v-leave-to{
	opacity：0
}
.v-leave-from,
.v-enter-to{
opacity：1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></blockquote><h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> Vue-Router</h1><p>useRouter(), useRoute</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">//路由器对象，存放路由导航方法</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">//路由信息对象，存放path，query这类数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>手动</p>`,58),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","Vue3.html.vue"]]);export{r as default};
